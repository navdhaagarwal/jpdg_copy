public class test.Tester extends test.Parent
{
    int c;
    static int status;
    static test.Parent p;

    static void <clinit>()
    {
        test.Parent $stack0;

        <test.Tester: int status> = 1;

        $stack0 = new test.Parent;

        specialinvoke $stack0.<test.Parent: void <init>()>();

        <test.Tester: test.Parent p> = $stack0;

        return;
    }

    void <init>()
    {
        test.Tester this;

        this := @this: test.Tester;

        specialinvoke this.<test.Parent: void <init>()>();

        this.<test.Tester: int c> = 0;

        return;
    }

    static void print()
    {
        java.lang.StringBuilder $stack1, $stack3;
        java.io.PrintStream $stack2;
        java.lang.String $stack4;
        int i;

        i = 0;

        goto label2;

     label1:
        $stack2 = <java.lang.System: java.io.PrintStream out>;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Print ");

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack2.<java.io.PrintStream: void println(java.lang.String)>($stack4);

        i = i + 1;

     label2:
        if i < 5 goto label1;

        return;
    }

    static int show(int, float)
    {
        int a, c;
        float f;
        java.lang.StringBuilder $stack3, $stack5;
        java.io.PrintStream $stack4;
        java.lang.String $stack6;

        a := @parameter0: int;

        f := @parameter1: float;

        if a <= 1 goto label1;

        c = 2 * a;

        goto label2;

     label1:
        c = a * -1;

     label2:
        $stack4 = <java.lang.System: java.io.PrintStream out>;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>(java.lang.String)>("f:");

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack4.<java.io.PrintStream: void println(java.lang.String)>($stack6);

        return c;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        int b;
        java.lang.StringBuilder $stack3, $stack5;
        java.io.PrintStream $stack4;
        java.lang.String $stack6;

        args := @parameter0: java.lang.String[];

        staticinvoke <test.Parent: void display(int,int)>(1, 11);

        staticinvoke <test.Parent: void print(java.lang.String)>("child");

        b = staticinvoke <test.Tester: int show(int,float)>(1, 1.0F);

        staticinvoke <test.Tester: void print()>();

        $stack4 = <java.lang.System: java.io.PrintStream out>;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Returned");

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack4.<java.io.PrintStream: void println(java.lang.String)>($stack6);

        return;
    }
}
